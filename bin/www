#!/usr/bin/env node
/**
 * Created by cshao on 1/6/16.
 */

"use strict";

var debugServer = require('debug')('csboilerplate:server');
var http = require('http');
var app = require('../app');
var config = require('../config/config');

/**
 * Load config.properties file and start server with configuration
 */
config.load(function(obj) {
  startServer(obj);
});

/**
 * Launch server
 * @param paramObj - parameter object for server
 * @param paramObj.SECRET - secret for user authentication
 */
function startServer(paramObj) {
  app.configRoute(paramObj.SECRET);
  app.configErrorHandler(paramObj.DEV_MODE);
  app.configTemplate(paramObj.DEV_MODE);

  var appPort = normalizePort(process.env['PORT'] || '3000');
  app.set('port', appPort);

  var server = http.createServer(app);
  server.listen(appPort);
  server.on('error', onAppError);
  server.on('listening', onAppListening);

  function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
      // named pipe
      return val;
    }

    if (port >= 0) {
      // port number
      return port;
    }

    return false;
  }

  function onAppError(error) {
    onError(error, appPort);
  }
  function onError(error, port) {
    if (error.syscall !== 'listen') {
      throw error;
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
      case 'EACCES':
        debugServer(bind + ' requires elevated privileges');
        process.exit(1);
        break;
      case 'EADDRINUSE':
        debugServer(bind + ' is already in use');
        process.exit(1);
        break;
      default:
        throw error;
    }
  }

  function onAppListening() {
    var addr = server.address();
    onListening(addr);
  }
  function onListening(addr) {
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
    debugServer('Listening on ' + bind);
  }
}