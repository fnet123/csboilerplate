var gulp = require('gulp'),
    del = require('del'),
    gulpif = require('gulp-if'),
    htmlhint = require('gulp-htmlhint'),
    jshint = require('gulp-jshint'),
    less = require('gulp-less'),
    gutil = require('gulp-util'),
    autoprefixer = require('gulp-autoprefixer'),
    minifycss = require('gulp-minify-css'),
    uglify = require('gulp-uglify'),
    browserify = require('browserify'),
    glob = require('glob').sync,
    buffer = require('vinyl-buffer'),
    source = require('vinyl-source-stream'),
    transform = require('vinyl-transform'),
    fs = require('fs'),
    properties = require('properties'),
    config = require('./config/config');

var DEV_MODE = true;

// Views
gulp.task('views', function(){
  return gulp.src(['web/views/**/*.html', 'web/components/**/*.html'])
    .pipe(htmlhint({
      'doctype-first': false
    }))
    .pipe(htmlhint.failReporter());
});

// Stylesheets
gulp.task('stylesheets', function(){
  return gulp.src(['web/stylesheets/**/*.less', 'web/components/**/*.less'])
    .pipe(less({
      paths: ['./web']
    }))
    .on('error', gutil.log)
    .pipe(autoprefixer({browsers: ['> 1% in CN'], cascade: false}))
    .pipe(gulpif(!DEV_MODE, minifycss()))
    .pipe(gulp.dest('web/compiled/stylesheets'));
});

// Scripts
gulp.task('scripts', ['jshint'], function(){
  gulp.start('mobile_scripts', 'pc_scripts');
});

gulp.task('jshint', function() {
  return gulp.src(['./web/components/**/*.js', '!./web/components/tp/**/*.js'])
    .pipe(jshint('.jshintrc'))
    .pipe(jshint.reporter('default'))
    .pipe(jshint.reporter('fail'));
});

// Mobile Scripts
gulp.task('mobile_scripts', function(){
  return browserify({
    entries: glob('./web/components/mobile/controller/**/*.js'),
    paths: ['./web/components']
  })
    .bundle()
    .pipe(source('csboilerplate.js'))
    .pipe(buffer())
    .pipe(gulpif(!DEV_MODE, uglify({
      mangle: false
    })))
    .pipe(gulp.dest('./web/compiled/scripts/mobile'));
});

// PC Scripts
gulp.task('pc_scripts', function(){
  return browserify({
    entries: glob('./web/components/pc/controller/**/*.js'),
    paths: ['./web/components']
  })
    .bundle()
    .pipe(source('csboilerplate.js'))
    .pipe(buffer())
    .pipe(gulpif(!DEV_MODE, uglify({
      mangle: true
    })))
    .pipe(gulp.dest('./web/compiled/scripts/pc'));
});

// Clean
gulp.task('clean', function(cb) {
  del(['web/compiled/stylesheets', 'web/compiled/scripts', 'web/components/constants.js'], cb);
});

// Default task
gulp.task('default', ['clean'], function() {
  config.load(function(obj) {
    DEV_MODE = obj.DEV_MODE;
    var content = '//This file is dynamically generated by config.properties. Please do not change it. \n';
    for (var k in obj.endpoint) {
      content = content + 'exports.' + k + ' = "' + obj.endpoint[k] + '";\n';
    }
    fs.writeFileSync('web/components/common/constants.js', content);

    gulp.start('views', 'stylesheets', 'scripts');
  });
});

gulp.task('watch', function() {
  gulp.watch(['web/stylesheets/**/*.less', 'web/components/**/*.less'], ['stylesheets']);
  gulp.watch('web/components/**/*.js', ['scripts']);
});